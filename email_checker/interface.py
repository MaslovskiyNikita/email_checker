import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import threading
import json
import time
from datetime import datetime
import os
import sys

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from mass_scanner import MassWebsiteEmailScanner
    SCANNER_AVAILABLE = True
    print("‚úÖ –°–∫–∞–Ω–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–∫–∞–Ω–µ—Ä–∞: {e}")
    SCANNER_AVAILABLE = False
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GUI
    class MassWebsiteEmailScanner:
        def __init__(self, proxies=None, max_workers=20):
            self.stats = {
                'total_sites_checked': 0,
                'sites_with_emails': 0,
                'total_emails_found': 0,
                'start_time': datetime.now().isoformat(),
                'sites_processed': 0,
                'search_sites_found': 0
            }
            self.found_emails = set()
            self.stop_event = threading.Event()
            self.proxies = proxies
            self.max_workers = max_workers
            
        def run_mass_scan(self, total_sites=1000, search_query=None):
            # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∫–∞–Ω–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GUI
            self.log_message(f"üîß –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {total_sites} —Å–∞–π—Ç–æ–≤")
            if search_query:
                self.log_message(f"üîß –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {search_query}")
            
            for i in range(total_sites):
                if self.stop_event.is_set():
                    self.log_message("‚èπÔ∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    break
                
                time.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.stats['sites_processed'] = i + 1
                self.stats['total_sites_checked'] = i + 1
                
                # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è email
                if i % 15 == 0 and i > 0:
                    email = f"contact{i}@example.com"
                    self.found_emails.add(email)
                    self.stats['total_emails_found'] = len(self.found_emails)
                    self.stats['sites_with_emails'] += 1
                    self.log_message(f"üéØ –ù–∞–π–¥–µ–Ω email: {email}")
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                if i % 50 == 0:
                    self.log_message(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i+1}/{total_sites} —Å–∞–π—Ç–æ–≤")
            
            self.log_message("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        def log_message(self, message):
            # –í —Ä–µ–∞–ª—å–Ω–æ–º —Å–∫–∞–Ω–µ—Ä–µ —ç—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ logging
            print(f"[SCANNER] {message}")

class EmailScannerGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üéØ Mass Email Scanner Pro")
        self.root.geometry("900x700")
        self.root.configure(bg='#f0f0f0')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞
        self.scanner = None
        self.scan_thread = None
        self.is_scanning = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.load_config()
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∫–∞–Ω–µ—Ä–∞
        if not SCANNER_AVAILABLE:
            self.log_message("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–∞–Ω–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.", "WARNING")
            self.log_message("‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª mass_scanner.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ", "WARNING")
        
    def create_widgets(self):
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è —Ä–µ–∑–∏–Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, 
                               text="üéØ Mass Email Scanner Pro", 
                               font=('Arial', 16, 'bold'),
                               foreground='#2c3e50')
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        status_text = "‚úÖ –°–∫–∞–Ω–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω" if SCANNER_AVAILABLE else "‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º"
        status_label = ttk.Label(main_frame, text=status_text, 
                                foreground='green' if SCANNER_AVAILABLE else 'orange')
        status_label.grid(row=0, column=2, sticky=tk.E, pady=(0, 20))
        
        # –§—Ä–µ–π–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_frame = ttk.LabelFrame(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", padding="10")
        settings_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        settings_frame.columnconfigure(1, weight=1)
        
        # –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        ttk.Label(settings_frame, text="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:").grid(row=0, column=0, sticky=tk.W, pady=2)
        self.search_var = tk.StringVar()
        self.search_entry = ttk.Entry(settings_frame, textvariable=self.search_var, width=40)
        self.search_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), pady=2, padx=(5, 0))
        ttk.Label(settings_frame, text="(–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É, —É—Å–ª—É–≥–∏ —é—Ä–∏—Å—Ç–∞)").grid(row=0, column=2, sticky=tk.W, pady=2, padx=(5, 0))
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤
        ttk.Label(settings_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤:").grid(row=1, column=0, sticky=tk.W, pady=2)
        self.sites_var = tk.StringVar(value="100")
        self.sites_entry = ttk.Entry(settings_frame, textvariable=self.sites_var, width=10)
        self.sites_entry.grid(row=1, column=1, sticky=tk.W, pady=2, padx=(5, 0))
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        ttk.Label(settings_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤:").grid(row=2, column=0, sticky=tk.W, pady=2)
        self.threads_var = tk.StringVar(value="10")
        self.threads_entry = ttk.Entry(settings_frame, textvariable=self.threads_var, width=10)
        self.threads_entry.grid(row=2, column=1, sticky=tk.W, pady=2, padx=(5, 0))
        
        # –†–µ–∂–∏–º –ø—Ä–æ–∫—Å–∏
        ttk.Label(settings_frame, text="–†–µ–∂–∏–º –ø—Ä–æ–∫—Å–∏:").grid(row=3, column=0, sticky=tk.W, pady=2)
        self.proxy_mode = tk.StringVar(value="with_proxy")
        ttk.Radiobutton(settings_frame, text="–° –ø—Ä–æ–∫—Å–∏", variable=self.proxy_mode, value="with_proxy").grid(row=3, column=1, sticky=tk.W, pady=2)
        ttk.Radiobutton(settings_frame, text="–ë–µ–∑ –ø—Ä–æ–∫—Å–∏", variable=self.proxy_mode, value="without_proxy").grid(row=3, column=2, sticky=tk.W, pady=2)
        
        # –§—Ä–µ–π–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(main_frame)
        control_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.start_button = ttk.Button(control_frame, text="üöÄ –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", command=self.start_scan)
        self.start_button.grid(row=0, column=0, padx=(0, 10))
        
        self.stop_button = ttk.Button(control_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.stop_scan, state=tk.DISABLED)
        self.stop_button.grid(row=0, column=1, padx=(0, 10))
        
        self.export_button = ttk.Button(control_frame, text="üíæ –≠–∫—Å–ø–æ—Ä—Ç email", command=self.export_emails)
        self.export_button.grid(row=0, column=2, padx=(0, 10))
        
        # –§—Ä–µ–π–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_frame = ttk.LabelFrame(main_frame, text="–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", padding="10")
        progress_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        progress_frame.columnconfigure(0, weight=1)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(progress_frame, variable=self.progress_var, maximum=100)
        self.progress_bar.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 5))
        
        # –°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_label = ttk.Label(progress_frame, textvariable=self.status_var)
        status_label.grid(row=1, column=0, sticky=tk.W)
        
        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        self.time_var = tk.StringVar(value="–í—Ä–µ–º—è: 00:00:00")
        time_label = ttk.Label(progress_frame, textvariable=self.time_var)
        time_label.grid(row=1, column=1, sticky=tk.E)
        
        # –§—Ä–µ–π–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_frame = ttk.LabelFrame(main_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏", padding="10")
        stats_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –°–µ—Ç–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_vars = {}
        stats_data = [
            ("–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–∞–π—Ç–æ–≤:", "sites_checked"),
            ("–°–∞–π—Ç–æ–≤ —Å email:", "sites_with_emails"),
            ("–ù–∞–π–¥–µ–Ω–æ email:", "emails_found"),
            ("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö email:", "unique_emails"),
            ("–°–∞–π—Ç–æ–≤ –∏–∑ –ø–æ–∏—Å–∫–∞:", "search_sites")
        ]
        
        for i, (label, key) in enumerate(stats_data):
            ttk.Label(stats_frame, text=label, font=('Arial', 9)).grid(row=i//2, column=(i%2)*2, sticky=tk.W, pady=2)
            self.stats_vars[key] = tk.StringVar(value="0")
            ttk.Label(stats_frame, textvariable=self.stats_vars[key], font=('Arial', 9, 'bold')).grid(
                row=i//2, column=(i%2)*2+1, sticky=tk.W, pady=2, padx=(5, 20))
        
        # –§—Ä–µ–π–º –ª–æ–≥–æ–≤
        log_frame = ttk.LabelFrame(main_frame, text="–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", padding="10")
        log_frame.grid(row=5, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        main_frame.rowconfigure(5, weight=1)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        self.log_text = scrolledtext.ScrolledText(log_frame, height=15, wrap=tk.WORD)
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
        ttk.Button(log_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", command=self.clear_logs).grid(row=1, column=0, sticky=tk.E, pady=(5, 0))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        self.start_time = None
        self.update_time_id = None
        
        # –°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.log_counter = 0
        
    def log_message(self, message, level="INFO"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π
        if level == "ERROR":
            prefix = "‚ùå"
            color = "red"
        elif level == "WARNING":
            prefix = "‚ö†Ô∏è"
            color = "orange"
        elif level == "SUCCESS":
            prefix = "‚úÖ"
            color = "green"
        else:
            prefix = "‚ÑπÔ∏è"
            color = "black"
        
        formatted_message = f"[{timestamp}] {prefix} {message}\n"
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–º
        self.log_text.insert(tk.END, formatted_message)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ
        if level in ["ERROR", "WARNING", "SUCCESS"]:
            start_index = self.log_text.index("end-2l")
            end_index = self.log_text.index("end-1c")
            self.log_text.tag_add(level, start_index, end_index)
            self.log_text.tag_config(level, foreground=color)
        
        self.log_text.see(tk.END)
        
        # –ê–≤—Ç–æ-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        self.log_counter += 1
        if self.log_counter >= 10:
            self.save_logs()
            self.log_counter = 0
    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.log_text.delete(1.0, tk.END)
        self.log_counter = 0
    
    def save_logs(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            with open('scan_log.txt', 'w', encoding='utf-8') as f:
                f.write(self.log_text.get(1.0, tk.END))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if os.path.exists('scanner_config.json'):
                with open('scanner_config.json', 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    self.search_var.set(config.get('search_query', ''))
                    self.sites_var.set(config.get('sites_count', '100'))
                    self.threads_var.set(config.get('threads_count', '10'))
                    self.proxy_mode.set(config.get('proxy_mode', 'with_proxy'))
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", "ERROR")
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config = {
                'search_query': self.search_var.get(),
                'sites_count': self.sites_var.get(),
                'threads_count': self.threads_var.get(),
                'proxy_mode': self.proxy_mode.get()
            }
            with open('scanner_config.json', 'w', encoding='utf-8') as f:
                json.dump(config, f, ensure_ascii=False, indent=2)
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", "ERROR")
    
    def validate_inputs(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            sites = int(self.sites_var.get())
            threads = int(self.threads_var.get())
            
            if sites <= 0 or sites > 10000:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10000")
                return False
                
            if threads <= 0 or threads > 100:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
                return False
                
            return True
            
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            return False
    
    def start_scan(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.validate_inputs():
            return
            
        if self.is_scanning:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ!")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.save_config()
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        search_query = self.search_var.get().strip()
        if not search_query:
            search_query = None
            
        total_sites = int(self.sites_var.get())
        max_workers = int(self.threads_var.get())
        
        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏
        proxy_list = []
        if self.proxy_mode.get() == "with_proxy":
            proxy_list = [
                "191.102.154.117:9571:D2mBXc:SLokbJ",
                "191.102.172.175:9998:D2mBXc:SLokbJ",
            ]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–µ—Ä–∞
        try:
            self.scanner = MassWebsiteEmailScanner(proxies=proxy_list, max_workers=max_workers)
            self.log_message("‚úÖ –°–∫–∞–Ω–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ", "SUCCESS")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫–∞–Ω–µ—Ä–∞: {e}", "ERROR")
            return
        
        # –°–±—Ä–æ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.is_scanning = True
        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        self.progress_var.set(0)
        self.start_time = datetime.now()
        self.log_counter = 0
        
        # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        for var in self.stats_vars.values():
            var.set("0")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞
        self.log_message("=" * 50)
        self.log_message("üöÄ –ó–ê–ü–£–°–ö –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
        self.log_message("=" * 50)
        if search_query:
            self.log_message(f"üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {search_query}")
        self.log_message(f"üìä –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤: {total_sites}")
        self.log_message(f"‚ö° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {max_workers}")
        self.log_message(f"üîó –†–µ–∂–∏–º –ø—Ä–æ–∫—Å–∏: {'–í–∫–ª—é—á–µ–Ω' if proxy_list else '–í—ã–∫–ª—é—á–µ–Ω'}")
        if not SCANNER_AVAILABLE:
            self.log_message("üîß –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞", "WARNING")
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scan_thread = threading.Thread(
            target=self.run_scan,
            args=(total_sites, search_query),
            daemon=True
        )
        self.scan_thread.start()
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.monitor_progress()
        
        # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
        self.update_time()
    
    def run_scan(self, total_sites, search_query):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.scanner.run_mass_scan(total_sites=total_sites, search_query=search_query)
        except Exception as e:
            self.log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}", "ERROR")
        finally:
            self.is_scanning = False
    
    def monitor_progress(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.is_scanning and self.scanner:
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            self.scanning_finished()
            return
        
        if self.scanner:
            try:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                stats = self.scanner.stats
                self.stats_vars['sites_checked'].set(str(stats['sites_processed']))
                self.stats_vars['sites_with_emails'].set(str(stats['sites_with_emails']))
                self.stats_vars['emails_found'].set(str(stats['total_emails_found']))
                self.stats_vars['unique_emails'].set(str(len(self.scanner.found_emails)))
                self.stats_vars['search_sites'].set(str(stats.get('search_sites_found', 0)))
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                total_sites = int(self.sites_var.get())
                if total_sites > 0:
                    progress = (stats['sites_processed'] / total_sites) * 100
                    self.progress_var.set(min(progress, 100))
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                self.status_var.set(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['sites_processed']}/{total_sites} | –ù–∞–π–¥–µ–Ω–æ email: {len(self.scanner.found_emails)}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if self.is_scanning:
            self.root.after(1000, self.monitor_progress)
    
    def update_time(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã"""
        if self.is_scanning and self.start_time:
            elapsed = datetime.now() - self.start_time
            hours, remainder = divmod(int(elapsed.total_seconds()), 3600)
            minutes, seconds = divmod(remainder, 60)
            self.time_var.set(f"–í—Ä–µ–º—è: {hours:02d}:{minutes:02d}:{seconds:02d}")
            self.update_time_id = self.root.after(1000, self.update_time)
        else:
            if self.update_time_id:
                self.root.after_cancel(self.update_time_id)
    
    def stop_scan(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.scanner and self.is_scanning:
            self.scanner.stop_event.set()
            self.is_scanning = False
            self.log_message("‚èπÔ∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "WARNING")
            self.status_var.set("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            self.start_button.config(state=tk.NORMAL)
            self.stop_button.config(state=tk.DISABLED)
    
    def scanning_finished(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.is_scanning = False
        self.start_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)
        
        if self.scanner:
            # –í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.log_message("=" * 50)
            self.log_message("üìä –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û", "SUCCESS")
            self.log_message("=" * 50)
            self.log_message(f"‚úÖ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–∞–π—Ç–æ–≤: {self.scanner.stats['total_sites_checked']}")
            self.log_message(f"üéØ –°–∞–π—Ç–æ–≤ —Å email: {self.scanner.stats['sites_with_emails']}")
            self.log_message(f"üìß –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ email: {self.scanner.stats['total_emails_found']}")
            self.log_message(f"üîë –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö email: {len(self.scanner.found_emails)}")
            
            # –ü–æ–∫–∞–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö email
            if self.scanner.found_emails:
                self.log_message("\nüì¨ –ù–∞–π–¥–µ–Ω–Ω—ã–µ email –∞–¥—Ä–µ—Å–∞:", "SUCCESS")
                for email in sorted(self.scanner.found_emails):
                    self.log_message(f"  üìß {email}")
            else:
                self.log_message("‚ùå Email –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "WARNING")
            
            self.status_var.set("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
            # –ê–≤—Ç–æ-—ç–∫—Å–ø–æ—Ä—Ç email
            self.auto_export_emails()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤
        self.save_logs()
    
    def export_emails(self):
        """–≠–∫—Å–ø–æ—Ä—Ç email –≤ —Ñ–∞–π–ª"""
        if not self.scanner or not self.scanner.found_emails:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç email –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å email"
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    for email in sorted(self.scanner.found_emails):
                        f.write(f"{email}\n")
                self.log_message(f"‚úÖ Email —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {filename}", "SUCCESS")
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"Email —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª:\n{filename}")
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}", "ERROR")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å email: {e}")
    
    def auto_export_emails(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç email –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.scanner and self.scanner.found_emails:
            try:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"found_emails_{timestamp}.txt"
                
                with open(filename, 'w', encoding='utf-8') as f:
                    for email in sorted(self.scanner.found_emails):
                        f.write(f"{email}\n")
                
                self.log_message(f"‚úÖ Email –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}", "SUCCESS")
                
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email: {e}", "ERROR")
    
    def on_closing(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.is_scanning:
            if messagebox.askokcancel("–í—ã—Ö–æ–¥", "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"):
                self.stop_scan()
                # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                self.root.after(1000, self.root.destroy)
        else:
            self.root.destroy()

def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    root = tk.Tk()
    app = EmailScannerGUI(root)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
    root.update_idletasks()
    x = (root.winfo_screenwidth() - root.winfo_reqwidth()) // 2
    y = (root.winfo_screenheight() - root.winfo_reqheight()) // 2
    root.geometry(f"+{x}+{y}")
    
    root.mainloop()

if __name__ == "__main__":
    main()